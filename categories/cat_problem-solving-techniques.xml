<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pollard's Rho (Posts about problem-solving-techniques)</title><link>https://nicholas-miklaucic.github.io/</link><description></description><atom:link href="https://nicholas-miklaucic.github.io/categories/cat_problem-solving-techniques.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:nicholas.miklaucic@gmail.com"&gt;Nicholas Miklaucic&lt;/a&gt; </copyright><lastBuildDate>Wed, 12 Aug 2020 19:01:18 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Problem Solving Techniques: Induction</title><link>https://nicholas-miklaucic.github.io/posts/problem-solving-techniques-induction/</link><dc:creator>Nicholas Miklaucic</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;i&gt;This is the second in my series on problem-solving techniques: for the first, see &lt;a href="https://nicholas-miklaucic.github.io/posts/problem-solving-techniques-invariants/"&gt;this post on invariants.&lt;/a&gt;&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
As I've previously discussed, I'm fascinated by the ability to create proofs or solutions for
problems that are easy to understand but difficult to synthesize. In this series, I'm trying to shed
some limited insight on how we mere mortals can arrive at these beautiful and creative insights.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nicholas-miklaucic.github.io/posts/problem-solving-techniques-induction/"&gt;Read more…&lt;/a&gt; (13 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cs</category><category>math</category><guid>https://nicholas-miklaucic.github.io/posts/problem-solving-techniques-induction/</guid><pubDate>Thu, 16 Jan 2020 18:53:20 GMT</pubDate></item><item><title>Problem-Solving Techniques: Invariants</title><link>https://nicholas-miklaucic.github.io/posts/problem-solving-techniques-invariants/</link><dc:creator>Nicholas Miklaucic</dc:creator><description>&lt;div&gt;&lt;p&gt;
There are a lot of clever proofs in mathematics and computer science. I've already talked about some
of them, and I hope to do a lot more of it on this blog. There's often a certain separation that I
feel when I read something particularly creative or beautiful: this is amazing, but how could I ever
hope to produce something like it? Is real aesthetic achievement in these fields limited to those
with a natural talent I lack? 
&lt;/p&gt;

&lt;p&gt;
I'm still not sure about that last question, but I do know that, like anything, it is possible to
improve at creative problem-solving through practice. The people I've known who have been best at
doing creative math—the kind that makes perfect sense when you see it but seems impossible to find
if you don't already know it—have built up vast toolboxes of concepts and ideas that are useful in
many different ways across mathematics and computer science. These aren't solutions for a single
problem: they're meta-solutions that serve as an archetype for solutions to a diverse array of
problems. In my experience, the size of that toolbox is what, more than anything else, determines
how effectively one can find creative, novel ways of approaching problems. I'll be talking about one
such tool today: invariants.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nicholas-miklaucic.github.io/posts/problem-solving-techniques-invariants/"&gt;Read more…&lt;/a&gt; (14 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>cs</category><category>math</category><guid>https://nicholas-miklaucic.github.io/posts/problem-solving-techniques-invariants/</guid><pubDate>Tue, 07 Jan 2020 17:26:06 GMT</pubDate></item></channel></rss>